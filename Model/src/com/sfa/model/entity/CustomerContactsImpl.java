package com.sfa.model.entity;

import com.sfa.model.base.BaseEntityImpl;

import java.math.BigDecimal;

import java.sql.Timestamp;

import oracle.jbo.ApplicationModule;
import oracle.jbo.AttributeList;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Feb 28 14:10:16 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CustomerContactsImpl extends BaseEntityImpl {


    private ViewObject getContactNameExistsView(DBTransaction t) {
        ApplicationModule root = t.getRootApplicationModule();
        ViewObject vo = root.findViewObject("ContactNameExists");
        if (vo == null) {
            vo = root.createViewObject("ContactNameExists", "com.sfa.model.VO.ContactNameExists");
        }
        return vo;
    }

    /**
     * Validation method for ContactName.
     */
    public boolean validateContactName(String contactname) {

        System.out.println("Validating contact name");

        //String contactName = getContactName();
        BigDecimal accountId = getCustAccountId();

        System.out.println("Contact Name " + contactname);

        System.out.println("Account Id " + accountId);

        ViewObject vo = getContactNameExistsView(getDBTransaction());

        vo.defineNamedWhereClauseParam("ACCOUNT_ID", null, null);
        vo.defineNamedWhereClauseParam("NAME", null, null);

        vo.setNamedWhereClauseParam("ACCOUNT_ID", accountId);
        vo.setNamedWhereClauseParam("NAME", contactname);
        vo.setForwardOnly(true);
        vo.executeQuery();

        if (vo.first() == null) {
            System.out.println("contact exists");
            return false;
        }


        return true;
    }

    /**
     * Validation method for IsPrimary.
     */
    public boolean validateIsPrimary(String isprimary) {

        System.out.println("Is Primary Value::: " + isprimary);

        if (isprimary.equals("Yes")) {

            System.out.println("YES Primary contact....");

            EntityDefImpl def = getDefinitionObject();
            CustomerContactsDefImpl contactImpl = (CustomerContactsDefImpl) def;
            boolean primaryExist = contactImpl.exists(getDBTransaction(), "Yes", getCustAccountId());
            if (primaryExist) {
                return false;
            }
        }


        return true;
    }


    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        ContactId,
        CustAccountId,
        Title,
        Department,
        Address,
        WorkPhone,
        MobilePhone,
        Email,
        IsPrimary,
        CreationDate,
        LastUpdateDate,
        CreatedBy,
        LastUpdatedBy,
        NotesSeqId,
        LastUpdateLogin,
        ObjectVersionNumber,
        ContactName,
        DeleteFlag,
        BuyingRole,
        InfluenceLevel,
        AppointmentInvitees,
        CustomerAccount,
        InteractionTeam,
        Opportunities,
        OpportunityTeam,
        TaskTeam;
        static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final String ISPRIMARYVALUE = "Yes";


    public static final int CONTACTID = AttributesEnum.ContactId.index();
    public static final int CUSTACCOUNTID = AttributesEnum.CustAccountId.index();
    public static final int TITLE = AttributesEnum.Title.index();
    public static final int DEPARTMENT = AttributesEnum.Department.index();
    public static final int ADDRESS = AttributesEnum.Address.index();
    public static final int WORKPHONE = AttributesEnum.WorkPhone.index();
    public static final int MOBILEPHONE = AttributesEnum.MobilePhone.index();
    public static final int EMAIL = AttributesEnum.Email.index();
    public static final int ISPRIMARY = AttributesEnum.IsPrimary.index();
    public static final int CREATIONDATE = AttributesEnum.CreationDate.index();
    public static final int LASTUPDATEDATE = AttributesEnum.LastUpdateDate.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int LASTUPDATEDBY = AttributesEnum.LastUpdatedBy.index();
    public static final int NOTESSEQID = AttributesEnum.NotesSeqId.index();
    public static final int LASTUPDATELOGIN = AttributesEnum.LastUpdateLogin.index();
    public static final int OBJECTVERSIONNUMBER = AttributesEnum.ObjectVersionNumber.index();
    public static final int CONTACTNAME = AttributesEnum.ContactName.index();
    public static final int DELETEFLAG = AttributesEnum.DeleteFlag.index();
    public static final int BUYINGROLE = AttributesEnum.BuyingRole.index();
    public static final int INFLUENCELEVEL = AttributesEnum.InfluenceLevel.index();
    public static final int APPOINTMENTINVITEES = AttributesEnum.AppointmentInvitees.index();
    public static final int CUSTOMERACCOUNT = AttributesEnum.CustomerAccount.index();
    public static final int INTERACTIONTEAM = AttributesEnum.InteractionTeam.index();
    public static final int OPPORTUNITIES = AttributesEnum.Opportunities.index();
    public static final int OPPORTUNITYTEAM = AttributesEnum.OpportunityTeam.index();
    public static final int TASKTEAM = AttributesEnum.TaskTeam.index();

    /**
     * This is the default constructor (do not remove).
     */
    public CustomerContactsImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("com.sfa.model.entity.CustomerContacts");
    }


    /**
     * Gets the attribute value for ContactId, using the alias name ContactId.
     * @return the value of ContactId
     */
    public BigDecimal getContactId() {
        return (BigDecimal) getAttributeInternal(CONTACTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ContactId.
     * @param value value to set the ContactId
     */
    public void setContactId(BigDecimal value) {
        setAttributeInternal(CONTACTID, value);
    }

    /**
     * Gets the attribute value for CustAccountId, using the alias name CustAccountId.
     * @return the value of CustAccountId
     */
    public BigDecimal getCustAccountId() {
        return (BigDecimal) getAttributeInternal(CUSTACCOUNTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CustAccountId.
     * @param value value to set the CustAccountId
     */
    public void setCustAccountId(BigDecimal value) {
        setAttributeInternal(CUSTACCOUNTID, value);
    }

    /**
     * Gets the attribute value for Title, using the alias name Title.
     * @return the value of Title
     */
    public String getTitle() {
        return (String) getAttributeInternal(TITLE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Title.
     * @param value value to set the Title
     */
    public void setTitle(String value) {
        setAttributeInternal(TITLE, value);
    }

    /**
     * Gets the attribute value for Department, using the alias name Department.
     * @return the value of Department
     */
    public String getDepartment() {
        return (String) getAttributeInternal(DEPARTMENT);
    }

    /**
     * Sets <code>value</code> as the attribute value for Department.
     * @param value value to set the Department
     */
    public void setDepartment(String value) {
        setAttributeInternal(DEPARTMENT, value);
    }

    /**
     * Gets the attribute value for Address, using the alias name Address.
     * @return the value of Address
     */
    public String getAddress() {
        return (String) getAttributeInternal(ADDRESS);
    }

    /**
     * Sets <code>value</code> as the attribute value for Address.
     * @param value value to set the Address
     */
    public void setAddress(String value) {
        setAttributeInternal(ADDRESS, value);
    }

    /**
     * Gets the attribute value for WorkPhone, using the alias name WorkPhone.
     * @return the value of WorkPhone
     */
    public String getWorkPhone() {
        return (String) getAttributeInternal(WORKPHONE);
    }

    /**
     * Sets <code>value</code> as the attribute value for WorkPhone.
     * @param value value to set the WorkPhone
     */
    public void setWorkPhone(String value) {
        setAttributeInternal(WORKPHONE, value);
    }

    /**
     * Gets the attribute value for MobilePhone, using the alias name MobilePhone.
     * @return the value of MobilePhone
     */
    public String getMobilePhone() {
        return (String) getAttributeInternal(MOBILEPHONE);
    }

    /**
     * Sets <code>value</code> as the attribute value for MobilePhone.
     * @param value value to set the MobilePhone
     */
    public void setMobilePhone(String value) {
        setAttributeInternal(MOBILEPHONE, value);
    }

    /**
     * Gets the attribute value for Email, using the alias name Email.
     * @return the value of Email
     */
    public String getEmail() {
        return (String) getAttributeInternal(EMAIL);
    }

    /**
     * Sets <code>value</code> as the attribute value for Email.
     * @param value value to set the Email
     */
    public void setEmail(String value) {
        setAttributeInternal(EMAIL, value);
    }


    /**
     * Gets the attribute value for IsPrimary, using the alias name IsPrimary.
     * @return the value of IsPrimary
     */
    public String getIsPrimary() {
        return (String) getAttributeInternal(ISPRIMARY);
    }

    /**
     * Sets <code>value</code> as the attribute value for IsPrimary.
     * @param value value to set the IsPrimary
     */
    public void setIsPrimary(String value) {
        setAttributeInternal(ISPRIMARY, value);
    }

    /**
     * Gets the attribute value for CreationDate, using the alias name CreationDate.
     * @return the value of CreationDate
     */
    public Timestamp getCreationDate() {
        return (Timestamp) getAttributeInternal(CREATIONDATE);
    }

    /**
     * Gets the attribute value for LastUpdateDate, using the alias name LastUpdateDate.
     * @return the value of LastUpdateDate
     */
    public Timestamp getLastUpdateDate() {
        return (Timestamp) getAttributeInternal(LASTUPDATEDATE);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public String getCreatedBy() {
        return (String) getAttributeInternal(CREATEDBY);
    }

    /**
     * Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy.
     * @return the value of LastUpdatedBy
     */
    public String getLastUpdatedBy() {
        return (String) getAttributeInternal(LASTUPDATEDBY);
    }

    /**
     * Gets the attribute value for NotesSeqId, using the alias name NotesSeqId.
     * @return the value of NotesSeqId
     */
    public BigDecimal getNotesSeqId() {
        return (BigDecimal) getAttributeInternal(NOTESSEQID);
    }

    /**
     * Sets <code>value</code> as the attribute value for NotesSeqId.
     * @param value value to set the NotesSeqId
     */
    public void setNotesSeqId(BigDecimal value) {
        setAttributeInternal(NOTESSEQID, value);
    }

    /**
     * Gets the attribute value for LastUpdateLogin, using the alias name LastUpdateLogin.
     * @return the value of LastUpdateLogin
     */
    public String getLastUpdateLogin() {
        return (String) getAttributeInternal(LASTUPDATELOGIN);
    }

    /**
     * Gets the attribute value for ObjectVersionNumber, using the alias name ObjectVersionNumber.
     * @return the value of ObjectVersionNumber
     */
    public Integer getObjectVersionNumber() {
        return (Integer) getAttributeInternal(OBJECTVERSIONNUMBER);
    }

    /**
     * Gets the attribute value for ContactName, using the alias name ContactName.
     * @return the value of ContactName
     */
    public String getContactName() {
        return (String) getAttributeInternal(CONTACTNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for ContactName.
     * @param value value to set the ContactName
     */
    public void setContactName(String value) {
        setAttributeInternal(CONTACTNAME, value);
    }

    /**
     * Gets the attribute value for DeleteFlag, using the alias name DeleteFlag.
     * @return the value of DeleteFlag
     */
    public String getDeleteFlag() {
        return (String) getAttributeInternal(DELETEFLAG);
    }


    /**
     * Gets the attribute value for BuyingRole, using the alias name BuyingRole.
     * @return the value of BuyingRole
     */
    public String getBuyingRole() {
        return (String) getAttributeInternal(BUYINGROLE);
    }

    /**
     * Sets <code>value</code> as the attribute value for BuyingRole.
     * @param value value to set the BuyingRole
     */
    public void setBuyingRole(String value) {
        setAttributeInternal(BUYINGROLE, value);
    }

    /**
     * Gets the attribute value for InfluenceLevel, using the alias name InfluenceLevel.
     * @return the value of InfluenceLevel
     */
    public String getInfluenceLevel() {
        return (String) getAttributeInternal(INFLUENCELEVEL);
    }

    /**
     * Sets <code>value</code> as the attribute value for InfluenceLevel.
     * @param value value to set the InfluenceLevel
     */
    public void setInfluenceLevel(String value) {
        setAttributeInternal(INFLUENCELEVEL, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getAppointmentInvitees() {
        return (RowIterator) getAttributeInternal(APPOINTMENTINVITEES);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public BaseEntityImpl getCustomerAccount() {
        return (BaseEntityImpl) getAttributeInternal(CUSTOMERACCOUNT);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setCustomerAccount(BaseEntityImpl value) {
        setAttributeInternal(CUSTOMERACCOUNT, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getInteractionTeam() {
        return (RowIterator) getAttributeInternal(INTERACTIONTEAM);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getOpportunities() {
        return (RowIterator) getAttributeInternal(OPPORTUNITIES);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getOpportunityTeam() {
        return (RowIterator) getAttributeInternal(OPPORTUNITYTEAM);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getTaskTeam() {
        return (RowIterator) getAttributeInternal(TASKTEAM);
    }


    /**
     * @param contactId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal contactId) {
        return new Key(new Object[] { contactId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }

    //    @Override
    //    protected void validateEntity() {
    //
    //        if (getIsPrimary().equals("ISPRIMARYVALUE")) {
    //
    //            System.out.println("Primary contact....");
    //
    //            EntityDefImpl def = getDefinitionObject();
    //            CustomerContactsDefImpl contactImpl = (CustomerContactsDefImpl) def;
    //            boolean primaryExist = contactImpl.exists(getDBTransaction(), "ISPRIMARYVALUE", getCustAccountId());
    //            if (primaryExist) {
    //                        throw new JboException("Primary contact for the Customer Account exists");
    //        }
    //        super.validateEntity();
    //    }
    //}

}
